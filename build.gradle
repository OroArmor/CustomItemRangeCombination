buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.4.0'
        classpath 'org.kohsuke:github-api:1.114'
        classpath 'gradle.plugin.com.modrinth.minotaur:Minotaur:1.1.0'
    }
}

plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'maven-publish'
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'signing'
    id 'com.modrinth.minotaur' version '1.1.0'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    maven {
        url 'https://jitpack.io'
    }
}

ext.changelog = ''

license {
    header(rootProject.file('LICENSE'))
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    ['fabric-command-api-v1'].forEach {
        include(modImplementation(fabricApi.module(it, project.fabric_version)))
    }

    modImplementation(include('com.oroarmor:oro-config-fabric:2.0.0'))
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand 'version': project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = 'UTF-8'
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

jar {
    from('LICENSE') {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

artifacts {
    archives jar, sourcesJar, javadocJar
}

import org.gradle.api.publish.maven.MavenPublication
import org.gradle.api.artifacts.repositories.PasswordCredentials

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = 'Custom Item Range Combination'
                description = 'Allows for the changing of how far item entities combine in Minecraft.'
                url = 'http://github.com/OroArmor/CustomItemRangeCombination'

                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://mit-license.org/'
                    }
                }

                developers {
                    developer {
                        id = 'OroArmor'
                        name = 'Eli Orona'
                        email = 'eliorona@live.com'
                        url = 'oroarmor.com'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/OroArmor/CustomItemRangeCombination.git'
                    developerConnection = 'scm:git:ssh://github.com:OroArmor/CustomItemRangeCombination.git'
                    url = 'http://github.com/OroArmor/CustomItemRangeCombination'
                }
            }
        }
    }

    repositories {
        maven {
            name = 'SonatypeStaging'
            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials(PasswordCredentials) {
                def ossrhUsername = 'OroArmor'
                def ossrhPassword = project.hasProperty('ossrhPassword') ? project.property('ossrhPassword') : System.getenv('OSSRH_PASSWORD')

                username = ossrhUsername
                password = ossrhPassword
            }
        }

        maven {
            name = 'SonatypeSnapshot'
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
            credentials(PasswordCredentials) {
                def ossrhUsername = 'OroArmor'
                def ossrhPassword = project.hasProperty('ossrhPassword') ? project.property('ossrhPassword') : System.getenv('OSSRH_PASSWORD')

                username = ossrhUsername
                password = ossrhPassword
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

tasks.withType(Sign) {
    onlyIf {
        project.hasProperty('sign')
    }
}

if (project.hasProperty('sign')) {
    signing {
        useGpgCmd()
        sign configurations.archives
    }
}

curseforge {
    if (System.getenv('CURSE_API_KEY') != null) {
        apiKey = System.getenv('CURSE_API_KEY')
        project {
            id = project.curseforge_id
            releaseType = 'release'
            project.game_versions.split(',').each { String game_version -> addGameVersion game_version }
            addGameVersion 'Fabric'

            changelogType = 'html'
            changelog = project.ext.changelog

//			relations {
//				requiredDependency 'fabric-api'
//			}
            mainArtifact(remapJar.archivePath) {
                displayName = 'Custom Item Range Combination - $rootProject.mod_version'
            }
            afterEvaluate {
                uploadTask.dependsOn('build')
            }
        }
    }
    options {
        forgeGradleIntegration = false
        javaVersionAutoDetect = false
    }
}

import com.modrinth.minotaur.TaskModrinthUpload

task publishToModrinth(type: TaskModrinthUpload) {
    token = System.getenv('MODRINTH_TOKEN') // Use an environment property!
    projectId = project.modrinth_id
    versionNumber = project.version
    uploadFile = remapJar.archivePath // This is the java jar task
    changelog = project.ext.changelog
    project.game_versions.split(',').each { String game_version -> addGameVersion(game_version) }
    addLoader('fabric')
}

task github {
    onlyIf {
        System.getenv().GITHUB_TOKEN
    }

    doLast {
        def github = org.kohsuke.github.GitHub.connectUsingOAuth(System.getenv().GITHUB_TOKEN as String)
        def repository = github.getRepository('OroArmor/CustomItemRangeCombination')

        def releaseBuilder = new org.kohsuke.github.GHReleaseBuilder(repository, project.mod_version)
        releaseBuilder.name("$project.project_name $project.mod_version for $project.minecraft_version")
        releaseBuilder.body(project.ext.changelog)
        releaseBuilder.commitish('master')

        def ghRelease = releaseBuilder.create()
        ghRelease.uploadAsset(file("${project.rootDir}/build/libs/${archivesBaseName}-${version}.jar"), 'application/java-archive');
    }
}

task generateChangelog {
    def changelogFile = file('CHANGELOG.md')
    def contents = ''
    changelogFile.withReader { reader ->
        def line
        while ((line = reader.readLine()) != null)
            contents += line + '\n'
    }

    def changelogs = contents.split('\\-\\-\\-\\-')
    project.ext.changelog = changelogs.find { log -> log.contains(project.version) }
    println project.ext.changelog
}
